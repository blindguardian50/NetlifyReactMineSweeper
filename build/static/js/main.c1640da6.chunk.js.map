{"version":3,"sources":["Types/index.ts","components/GameBody/index.tsx","components/NumberDisplay/index.tsx","components/Face/index.tsx","components/GameHeader/index.tsx","Utils/index.ts","Constants/index.ts","components/BoardButton/index.tsx","components/Game/index.tsx","index.tsx"],"names":["CellValue","CellState","GameBody","props","className","cells","NumberDisplay","value","toString","padStart","Face","GameHeader","generateCells","rowIndex","colIndex","bomb","calculateNumber","calculateNumbers","bombsPlaced","randomRow","Math","floor","random","randomCol","map","row","cell","placeBombs","push","col","none","state","opened","initCells","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","counter","BoardButton","flagged","Game","useState","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IAAYA,EAaAC,E,sDCFGC,G,KAJ2B,SAACC,GACzC,OAAO,qBAAKC,UAAU,WAAf,SAA2BD,EAAME,UCK3BC,EANqC,SAClDH,GAEA,OAAO,qBAAKC,UAAU,gBAAf,SAAgCD,EAAMI,MAAMC,WAAWC,SAAS,EAAG,QCC7DC,EARQ,WACrB,OACE,qBAAKN,UAAU,OAAf,SACE,mDCSSO,EAVc,WAC3B,OACE,sBAAKP,UAAU,aAAf,UACE,cAAC,EAAD,CAAeG,MAAO,IACtB,cAAC,EAAD,IACA,cAAC,EAAD,CAAeA,MAAO,S,iBJVhBP,O,eAAAA,I,aAAAA,I,aAAAA,I,iBAAAA,I,eAAAA,I,eAAAA,I,aAAAA,I,iBAAAA,I,iBAAAA,I,gBAAAA,M,cAaAC,O,mBAAAA,I,mBAAAA,I,sBAAAA,M,KKVL,IAAMW,EAAgB,WAC3B,IAAIP,EAA4B,GAMhC,OAFAA,EA2CF,SAA0BA,GACxB,IAAK,IAAIQ,EAAW,EAAGA,ECnDD,EDmDsBA,IAC1C,IAAK,IAAIC,EAAW,EAAGA,ECrDH,EDqDwBA,IAAY,CAClCT,EAAMQ,GAAUC,GACpBP,QAAUP,EAAUe,OAGpCV,EAAQW,EAAgBX,EAAOQ,EAAUC,IAG7C,OAAOT,EArDCY,CADRZ,EAmBF,SAAoBA,GAClB,IAAIa,EAAc,EAD+C,aAG/D,IAAMC,EAAYC,KAAKC,MC5BH,ED4BSD,KAAKE,UAC5BC,EAAYH,KAAKC,MC9BH,ED8BSD,KAAKE,UACdjB,EAAMc,GAAWI,GAErBhB,QAAUP,EAAUe,OAClCV,EAAQA,EAAMmB,KAAI,SAACC,EAAKZ,GAAN,OAChBY,EAAID,KAAI,SAACE,EAAMZ,GACb,OAAID,IAAaM,GAAaL,IAAaS,EAClC,2BACFG,GADL,IAEEnB,MAAOP,EAAUe,OAGdW,QAGXR,MAjBJ,KAAOA,EC1BsB,ID0BU,IAoBvC,OAAOb,EAzCCsB,CADRtB,EAOF,SAAmBA,GACjB,IAAK,IAAIoB,EAAM,EAAGA,ECbI,EDaYA,IAAO,CACvCpB,EAAMuB,KAAK,IACX,IAAK,IAAIC,EAAM,EAAGA,EChBE,EDgBcA,IAChCxB,EAAMoB,GAAKG,KAAK,CACdrB,MAAOP,EAAU8B,KACjBC,MAAO9B,EAAU+B,SAIvB,OAAO3B,EAjBC4B,CAAU5B,MA0DpB,SAASW,EACPX,EACAQ,EACAC,GAEA,IAAMoB,EAAcrB,EAAW,GAAKC,EAAW,EAAIT,EAAMQ,EAAW,GAAGC,EAAW,GAAK,KACjFqB,EAAUtB,EAAW,EAAIR,EAAMQ,EAAW,GAAGC,GAAY,KACzDsB,EACJvB,EAAW,GAAKC,EAAWuB,EAAehC,EAAMQ,EAAW,GAAGC,EAAW,GAAK,KAC1EwB,EAAWxB,EAAW,EAAIT,EAAMQ,GAAUC,EAAW,GAAK,KAC1DyB,EAAYzB,EAAWuB,EAAehC,EAAMQ,GAAUC,EAAW,GAAK,KACtE0B,EACJ3B,EAAW4B,GAAgB3B,EAAW,EAAIT,EAAMQ,EAAW,GAAGC,EAAW,GAAK,KAC1E4B,EAAa7B,EAAW4B,EAAepC,EAAMQ,EAAW,GAAGC,GAAY,KACvE6B,EACJ9B,EAAW4B,GAAgB3B,EAAWuB,EAAehC,EAAMQ,EAAW,GAAGC,EAAW,GAAK,KAEvF8B,EAAU,EA6Bd,OA3Be,OAAXV,QAAW,IAAXA,OAAA,EAAAA,EAAa3B,SAAUP,EAAUe,MACnC6B,KAES,OAAPT,QAAO,IAAPA,OAAA,EAAAA,EAAS5B,SAAUP,EAAUe,MAC/B6B,KAEc,OAAZR,QAAY,IAAZA,OAAA,EAAAA,EAAc7B,SAAUP,EAAUe,MACpC6B,KAEU,OAARN,QAAQ,IAARA,OAAA,EAAAA,EAAU/B,SAAUP,EAAUe,MAChC6B,KAEW,OAATL,QAAS,IAATA,OAAA,EAAAA,EAAWhC,SAAUP,EAAUe,MACjC6B,KAEgB,OAAdJ,QAAc,IAAdA,OAAA,EAAAA,EAAgBjC,SAAUP,EAAUe,MACtC6B,KAEY,OAAVF,QAAU,IAAVA,OAAA,EAAAA,EAAYnC,SAAUP,EAAUe,MAClC6B,KAEiB,OAAfD,QAAe,IAAfA,OAAA,EAAAA,EAAiBpC,SAAUP,EAAUe,MACvC6B,IAGFvC,EAAMQ,GAAUC,GAAUP,MAAQqC,EAE3BvC,EEnGT,IAyBewC,EAzBiC,SAAC1C,GAc/C,OACE,qBACEC,UAAS,8BACPD,EAAM4B,QAAU9B,EAAU+B,OAAS,UAAY,GADxC,0BAED7B,EAAMI,OAHhB,SAbIJ,EAAM4B,QAAU9B,EAAU+B,OACxB7B,EAAMI,QAAUP,EAAUe,KACrB,gDACEZ,EAAMI,QAAUP,EAAU8B,KAC5B,KAEF3B,EAAMI,MACJJ,EAAM4B,QAAU9B,EAAU6C,QAC5B,gDAEF,QCWIC,EA1BQ,WAAO,IAAD,EACDC,mBAASpC,GADR,mBACpBP,EADoB,UAkB3B,OADA4C,QAAQC,IAAI,QAAS7C,GAEnB,sBAAKD,UAAU,OAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAUC,MAjBLA,EAAMmB,KAAI,SAACC,EAAKZ,GAAN,OACfY,EAAID,KAAI,SAACE,EAAMZ,GAAP,OACN,cAAC,EAAD,CAEEW,IAAKZ,EACLgB,IAAKf,EACLiB,MAAOL,EAAKK,MACZxB,MAAOmB,EAAKnB,OALd,UACUM,EADV,YACsBC,gBCV9BqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.c1640da6.chunk.js","sourcesContent":["export enum CellValue {\r\n  none,\r\n  one,\r\n  two,\r\n  three,\r\n  four,\r\n  five,\r\n  six,\r\n  seven,\r\n  eight,\r\n  bomb,\r\n}\r\n\r\nexport enum CellState {\r\n  closed,\r\n  opened,\r\n  flagged,\r\n}\r\n\r\nexport type Cell = {\r\n  value: CellValue;\r\n  state: CellState;\r\n};\r\n","import React, { ReactNode } from 'react';\r\nimport '../App/App.scss';\r\n\r\ninterface GameBodyProps {\r\n  cells: ReactNode;\r\n}\r\n\r\nconst GameBody: React.FC<GameBodyProps> = (props: GameBodyProps) => {\r\n  return <div className=\"GameBody\">{props.cells}</div>;\r\n};\r\n\r\nexport default GameBody;\r\n","import React, { useState } from 'react';\r\nimport '../App/App.scss';\r\n\r\ninterface NumberDisplayProps {\r\n  value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = (\r\n  props: NumberDisplayProps,\r\n): React.ReactElement => {\r\n  return <div className=\"NumberDisplay\">{props.value.toString().padStart(3, '0')}</div>;\r\n};\r\n\r\nexport default NumberDisplay;\r\n\r\n/*const NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n  return (\r\n    <div className=\"NumberDisplay\">\r\n      <text>{value.toString().padStart(3, '0')}</text>\r\n    </div>\r\n  );\r\n};*/\r\n\r\n/*function NumberDisplay(\r\n  props: NumberDisplayProps,\r\n): React.ReactElement {\r\n  return (\r\n    <div className=\"NumberDisplay\">\r\n      <text>{props.value.toString().padStart(3, '0')}</text>\r\n    </div>\r\n  );\r\n}*/\r\n","import React from 'react';\r\nimport '../App/App.scss';\r\n\r\nconst Face: React.FC = () => {\r\n  return (\r\n    <div className=\"Face\">\r\n      <span>&#x1F64A;</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Face;\r\n","import React from 'react';\r\nimport '../App/App.scss';\r\nimport NumberDisplay from '../NumberDisplay';\r\nimport Face from '../Face';\r\n\r\nconst GameHeader: React.FC = () => {\r\n  return (\r\n    <div className=\"GameHeader\">\r\n      <NumberDisplay value={0} />\r\n      <Face></Face>\r\n      <NumberDisplay value={99} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameHeader;\r\n","import { MAX_COLS, MAX_ROWS, NUMBER_OF_BOMBS } from '../Constants';\r\nimport { Cell, CellState, CellValue } from '../Types';\r\n\r\nexport const generateCells = (): Array<Array<Cell>> => {\r\n  let cells: Array<Array<Cell>> = [];\r\n\r\n  cells = initCells(cells);\r\n  cells = placeBombs(cells);\r\n  cells = calculateNumbers(cells);\r\n\r\n  return cells;\r\n};\r\n\r\nfunction initCells(cells: Array<Array<Cell>>): Array<Array<Cell>> {\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({\r\n        value: CellValue.none,\r\n        state: CellState.opened,\r\n      });\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n\r\nfunction placeBombs(cells: Array<Array<Cell>>): Array<Array<Cell>> {\r\n  let bombsPlaced = 0;\r\n  while (bombsPlaced < NUMBER_OF_BOMBS) {\r\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n    const currentCell = cells[randomRow][randomCol];\r\n\r\n    if (currentCell.value !== CellValue.bomb) {\r\n      cells = cells.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) => {\r\n          if (rowIndex === randomRow && colIndex === randomCol) {\r\n            return {\r\n              ...cell,\r\n              value: CellValue.bomb,\r\n            };\r\n          }\r\n          return cell;\r\n        }),\r\n      );\r\n      bombsPlaced++;\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n\r\nfunction calculateNumbers(cells: Array<Array<Cell>>): Array<Array<Cell>> {\r\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n      const currentCell = cells[rowIndex][colIndex];\r\n      if (currentCell.value === CellValue.bomb) {\r\n        continue;\r\n      }\r\n      cells = calculateNumber(cells, rowIndex, colIndex);\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n\r\nfunction calculateNumber(\r\n  cells: Array<Array<Cell>>,\r\n  rowIndex: number,\r\n  colIndex: number,\r\n): Array<Array<Cell>> {\r\n  const topLeftCell = rowIndex > 0 && colIndex > 0 ? cells[rowIndex - 1][colIndex - 1] : null;\r\n  const topCell = rowIndex > 0 ? cells[rowIndex - 1][colIndex] : null;\r\n  const topRightCell =\r\n    rowIndex > 0 && colIndex < MAX_COLS - 1 ? cells[rowIndex - 1][colIndex + 1] : null;\r\n  const leftCell = colIndex > 0 ? cells[rowIndex][colIndex - 1] : null;\r\n  const rightCell = colIndex < MAX_COLS - 1 ? cells[rowIndex][colIndex + 1] : null;\r\n  const bottomLeftCell =\r\n    rowIndex < MAX_ROWS - 1 && colIndex > 0 ? cells[rowIndex + 1][colIndex + 1] : null;\r\n  const bottomCell = rowIndex < MAX_ROWS - 1 ? cells[rowIndex + 1][colIndex] : null;\r\n  const bottomRightCell =\r\n    rowIndex < MAX_ROWS - 1 && colIndex < MAX_COLS - 1 ? cells[rowIndex + 1][colIndex - 1] : null;\r\n\r\n  let counter = 0;\r\n\r\n  if (topLeftCell?.value === CellValue.bomb) {\r\n    counter++;\r\n  }\r\n  if (topCell?.value === CellValue.bomb) {\r\n    counter++;\r\n  }\r\n  if (topRightCell?.value === CellValue.bomb) {\r\n    counter++;\r\n  }\r\n  if (leftCell?.value === CellValue.bomb) {\r\n    counter++;\r\n  }\r\n  if (rightCell?.value === CellValue.bomb) {\r\n    counter++;\r\n  }\r\n  if (bottomLeftCell?.value === CellValue.bomb) {\r\n    counter++;\r\n  }\r\n  if (bottomCell?.value === CellValue.bomb) {\r\n    counter++;\r\n  }\r\n  if (bottomRightCell?.value === CellValue.bomb) {\r\n    counter++;\r\n  }\r\n\r\n  cells[rowIndex][colIndex].value = counter;\r\n\r\n  return cells;\r\n}\r\n","export const MAX_COLS = 9;\nexport const MAX_ROWS = 9;\nexport const NUMBER_OF_BOMBS = 10;\n","import React from 'react';\r\nimport '../App/App.scss';\r\nimport { CellState, CellValue } from '../../Types';\r\n\r\ninterface BoardButtonProps {\r\n  row: number;\r\n  col: number;\r\n  state: CellState;\r\n  value: CellValue;\r\n}\r\n\r\nconst BoardButton: React.FC<BoardButtonProps> = (props: BoardButtonProps) => {\r\n  const renderContent = (): React.ReactNode => {\r\n    if (props.state === CellState.opened) {\r\n      if (props.value === CellValue.bomb) {\r\n        return <span>💣</span>;\r\n      } else if (props.value === CellValue.none) {\r\n        return null;\r\n      }\r\n      return props.value;\r\n    } else if (props.state === CellState.flagged) {\r\n      return <span>🚩</span>;\r\n    }\r\n    return null;\r\n  };\r\n  return (\r\n    <div\r\n      className={`BoardButton \r\n      ${props.state === CellState.opened ? 'visible' : ''} \r\n      value-${props.value}`}\r\n    >\r\n      {renderContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardButton;\r\n","import React, { useState } from 'react';\r\nimport '../App/App.scss';\r\nimport GameBody from '../GameBody';\r\nimport GameHeader from '../GameHeader';\r\nimport { generateCells } from '../../Utils';\r\nimport BoardButton from '../BoardButton';\r\nimport { MAX_COLS } from '../../Constants';\r\n\r\nconst Game: React.FC = () => {\r\n  const [cells, setCells] = useState(generateCells);\r\n\r\n  const renderCells = (): React.ReactNode => {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((cell, colIndex) => (\r\n        <BoardButton\r\n          key={`${rowIndex}-${colIndex}`}\r\n          row={rowIndex}\r\n          col={colIndex}\r\n          state={cell.state}\r\n          value={cell.value}\r\n        />\r\n      )),\r\n    );\r\n  };\r\n\r\n  console.log('cells', cells);\r\n  return (\r\n    <div className=\"Game\">\r\n      <GameHeader></GameHeader>\r\n      <GameBody cells={renderCells()}></GameBody>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}